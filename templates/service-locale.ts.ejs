import { PaginationDTO, PaginationService } from '@hedhog/pagination';
import { PrismaService } from '@hedhog/prisma';
import {
  BadRequestException,
  Inject,
  Injectable,
  forwardRef,
} from '@nestjs/common';
import { CreateDTO } from './dto/create.dto';
import { DeleteDTO } from '@hedhog/core';
import { UpdateDTO } from './dto/update.dto';
import { LocaleService } from '@hedhog/locale';

@Injectable()
export class <%= tableNameCase.pascal %>Service {
  private readonly modelName = '<%= tableNameCase.value %>';
  private readonly foreignKey = '<%= fkNameLocaleCase.value %>';

  constructor(
    @Inject(forwardRef(() => PrismaService))
    private readonly prismaService: PrismaService,
    @Inject(forwardRef(() => PaginationService))
    private readonly paginationService: PaginationService,
    @Inject(forwardRef(() => LocaleService))
    private readonly localeService: LocaleService,
  ) {}
  
  async list(locale: string, paginationParams: PaginationDTO) {
    return this.localeService.listModelWithLocale(locale, this.modelName, paginationParams)
  }

  async get(<%= pkNameCase.camel %>: number) {
    return this.localeService.getModelWithLocale(this.modelName, <%= pkNameCase.camel %>);
  }

  async create(data: CreateDTO) {
    return this.localeService.createModelWithLocale(
      this.modelName,
      this.foreignKey,
      data,
    );
  }

  async update({ <%= pkNameCase.camel %>, data }: { <%= pkNameCase.camel %>: number; data: UpdateDTO }) {
    return this.localeService.updateModelWithLocale(
      this.modelName,
      this.foreignKey,
      <%= pkNameCase.camel %>,
      data,
    );
  }

  async delete({ ids }: DeleteDTO) {
    if (ids == undefined || ids == null) {
      throw new BadRequestException(
        'You must select at least one item to delete.',
      );
    }

    return this.prismaService.<%= tableNameCase.snake %>.deleteMany({
      where: {
        <%= pkNameCase.snake %>: {
          in: ids,
        },
      },
    });
  }
}