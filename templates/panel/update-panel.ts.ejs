<% const toPascalCase = (str) => str.replace(/(^\w|[-_]\w)/g, (match) => match.replace(/[-_]/, '').toUpperCase()) %>;
<% const toCamelCase = (str) => str.replace(/_([a-z])/g, (_, char) => char.toUpperCase()); %>
<% const toKebabCase = (str) => str.replace(/_/g, '-'); %>

import FormPanel, { FormPanelRef, <%- hasLocale ? 'getFieldsLocale,' : '' %> } from '@/components/panels/form-panel'
import { Overlay } from '@/components/custom/overlay'
import { TabPanel } from '@/components/panels/tab-panel'
import { use<%= toPascalCase(tableName) %>Get, use<%= toPascalCase(tableName) %>Update } from '@/features/<%= libraryName %>/<%= toKebabCase(tableName) %>'
import useEffectAfterFirstUpdate from '@/hooks/use-effect-after-first-update'
import { <%= toPascalCase(tableName) %> } from '@/types/models'
import { forwardRef, useImperativeHandle, useRef } from 'react'
import { useTranslation } from 'react-i18next'
<% if (fields.filter(field => field.name).length) { %>import { EnumFieldType } from '@/enums/EnumFieldType'<% } %>
<% if (extraTabs.length) { %>
  import DataPanel from '@/components/panels/data-panel'
<% } %>
<%- extraImports %>

export type <%= toPascalCase(tableName) %>UpdatePanelProps = {
  data: <%= toPascalCase(tableName) %>
  onUpdated?: (data: <%= toPascalCase(tableName) %>) => void
}

const <%= toPascalCase(tableName) %>UpdatePanel = forwardRef(
  ({ data, onUpdated }: <%= toPascalCase(tableName) %>UpdatePanelProps, ref) => {
    const { t } = useTranslation(['actions'])
    const { data: item, isLoading } = use<%= toPascalCase(tableName) %>Get(data.id as number)
    const { mutate: <%= toCamelCase(tableName) %>Update } = use<%= toPascalCase(tableName) %>Update()
    const formRef = useRef<FormPanelRef>(null)
    const { openSheet, confirm, closeSheet } = useApp();

    <%- extraVars %>

    useEffectAfterFirstUpdate(() => {
      if (item && formRef.current) {
        formRef.current.setValuesFromItem(item)
      }
    }, [item])

    useImperativeHandle(ref, () => ({}))

    return (
      <TabPanel
        activeTabIndex={0}
        tabs={[
          {
            title: t('details', { ns: 'actions' }),
            children: (
              <Overlay loading={isLoading}>
                <FormPanel
                  ref={formRef}
                  fields={[
                      <% fields.forEach((field, index, array) => { %>
                      {
                          name: '<%= field.name %>',
                          label: { text: t('<%= field.name %>', { ns: 'translation' }) },
                          type: <%- field.inputType %>,
                          required: true,
                          <% if (field.url) { %>url: '<%= field.url %>',<% } %>
                          <% if (field.displayName) { %>displayName: '<%= field.displayName %>',<% } %>
                          <% if (field.valueName) { %>valueName: '<%= field.valueName %>',<% } %>
                      }<%= index < array.length - 1 || hasLocale ? ',' : '' %>
                      <% }) %>
                      <%- hasLocale ? '...getFieldsLocale([{ name: "name" }], item)' : '' %>
                  ]}
                  button={{ text: t('save', { ns: 'actions' }) }}
                  onSubmit={(data) => {
                    <%= toCamelCase(tableName) %>Update({ id: data.id, data })
                    if (typeof onUpdated === 'function') {
                      onUpdated(data)
                    }
                  }}
                />
              </Overlay>
            ),
          },
          <%- extraTabs %>
        ]}
      />
    )
  }
)

<%= toPascalCase(tableName) %>UpdatePanel.displayName = '<%= toPascalCase(tableName) %>UpdatePanel'

export default <%= toPascalCase(tableName) %>UpdatePanel