import FormPanel, { FormPanelRef, <%- hasLocale ? 'getFieldsLocale,' : '' %> } from '@/components/panels/form-panel'
<% if (fields.filter(field => field.name).length) { %>import { EnumFieldType } from '@/enums/EnumFieldType'<% } %>
import { use<%= tableNameCase.pascal %>Create } from '@/features/<%= libraryName %>/<%= tableNameCase.kebab %>'
import { <%= tableNameCase.pascal %> } from '@/types/models'
import { forwardRef, useImperativeHandle, useRef } from 'react'
import { useTranslation } from 'react-i18next'

export type <%= tableNameCase.pascal %>CreatePanelRef = {
    submit: () => void
}

export type <%= tableNameCase.pascal %>CreatePanelProps = {
    onCreated?: (data: <%= tableNameCase.pascal %>) => void
}

const <%= tableNameCase.pascal %>CreatePanel = forwardRef(
    ({ onCreated }: <%= tableNameCase.pascal %>CreatePanelProps, ref) => {
        const formRef = useRef<FormPanelRef>(null)
        const { t } = useTranslation(['actions', 'fields', 'translations'])
        const { mutateAsync: create<%= tableNameCase.pascal %> } = use<%= tableNameCase.pascal %>Create()

        useImperativeHandle(
            ref,
            () => ({
                submit: () => {
                formRef.current?.submit()
            },
        }),
        [formRef])

        return (
            <FormPanel
                ref={formRef}
                fields={[
                    <% fields.forEach((field, index, array) => { %>
                    {
                        name: '<%= field.name %>',
                        label: { text: t('<%= tableNameCase.snake %>.<%= field.name %>', { ns: 'fields' }) },
                        type: <%- field.inputType %>,
                        required: true,
                        <% if (field.url) { %>url: '<%= field.url %>',<% } %>
                        <% if (field.displayName) { %>displayName: '<%= field.displayName %>',<% } %>
                        <% if (field.valueName) { %>valueName: '<%= field.valueName %>',<% } %>
                    }<%= index < array.length - 1 || hasLocale ? ',' : '' %>
                    <% }) %>
                    <%- hasLocale ? '...getFieldsLocale([{ name: "name" }])' : '' %>
                ]}
                button={{ text: t('create', { ns: 'actions' }) }}
                onSubmit={async (data) => {
                    const createdData = await create<%= tableNameCase.pascal %>(data)
                    if (typeof onCreated === 'function') {
                        onCreated(createdData)
                    }
                }}
            />
        )
    }
)

<%= tableNameCase.pascal %>CreatePanel.displayName = '<%= tableNameCase.pascal %>CreatePanel'

export default <%= tableNameCase.pascal %>CreatePanel