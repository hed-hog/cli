<% const toPascalCase = (str) => str.replace(/(^\w|[-_]\w)/g, (match) => match.replace(/[-_]/, '').toUpperCase()) %>;
<% const toCamelCase = (str) => str.replace(/_([a-z])/g, (_, char) => char.toUpperCase()); %>
<% const toKebabCase = (str) => str.replace(/_/g, '-'); %>
<% const getFirstName = (str) => str.split('_')[0] %>
<% const getSecondName = (str) => str.split('_')[1] %>

import { useApp } from "@/hooks/use-app";
import { Delete, PaginationParams, PaginationResult } from "@/types";
import { <%= toPascalCase(tableName) %>Type } from "@/types/models";
import { HttpMethod } from "@/types/http-method";
import { formatDataWithLocale } from "@hedhog/utils";

export function requests() {
  const { request } = useApp();

  const <%= toCamelCase(tableName) %>List = async (
    <%= getFirstName(tableName) %>Id: number,
    params: PaginationParams & { typeId?: number; <%= getSecondName(tableName) %>Id?: number }
  ) => {
    return request<PaginationResult<<%= toPascalCase(tableName) %>Type>>({
      url: `/<%= getFirstName(tableName) %>/${<%= getFirstName(tableName) %>Id}/<%= getSecondName(tableName) %>`,
      params,
    }).then((res) => res.data);
  };

  const <%= toCamelCase(tableName) %>Create = async (<%= getFirstName(tableName) %>Id: number, data: <%= toPascalCase(tableName) %>Type) => {
    return request<<%= toPascalCase(tableName) %>Type>({
      url: `/<%= getFirstName(tableName) %>/${<%= getFirstName(tableName) %>Id}/<%= getSecondName(tableName) %>`,
      method: HttpMethod.POST,
      data: formatDataWithLocale(data),
    }).then((res) => res.data);
  };

  const <%= toCamelCase(tableName) %>Update = async (
    <%= getFirstName(tableName) %>Id: number,
    <%= getSecondName(tableName) %>Id: number,
    data: <%= toPascalCase(tableName) %>Type
  ) => {
    return request<<%= toPascalCase(tableName) %>Type>({
      url: `/<%= getFirstName(tableName) %>/${<%= getFirstName(tableName) %>Id}/<%= getSecondName(tableName) %>/${<%= getSecondName(tableName) %>Id}`,
      method: HttpMethod.PATCH,
      data: formatDataWithLocale(data),
    }).then((res) => res.data);
  };

  const <%= toCamelCase(tableName) %>Delete = async (<%= getFirstName(tableName) %>Id: number, ids: number[]) => {
    return request<Delete>({
      url: `/<%= getFirstName(tableName) %>/${<%= getFirstName(tableName) %>Id}/<%= getSecondName(tableName) %>`,
      method: HttpMethod.DELETE,
      data: { ids },
    }).then((res) => res.data);
  };

  return {
    <%= toCamelCase(tableName) %>Create,
    <%= toCamelCase(tableName) %>Update,
    <%= toCamelCase(tableName) %>Delete,
    <%= toCamelCase(tableName) %>List,
  };
}
