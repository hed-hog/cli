import { DeleteDTO } from '@hedhog/core';
import { LocaleService } from '@hedhog/locale';
import { PaginationDTO, PaginationService } from '@hedhog/pagination';
import { PrismaService } from '@hedhog/prisma';
import {
  BadRequestException,
  forwardRef,
  Inject,
  Injectable,
} from '@nestjs/common';
import { CreateDTO } from './dto/create.dto';
import { UpdateDTO } from './dto/update.dto';

@Injectable()
export class <%= tableNameCase.pascal %>Service {
  private readonly modelName = '<%= tableNameCase.value %>';
  private readonly foreignKey = '<%= fkNameLocaleCase.value %>';

  constructor(
    @Inject(forwardRef(() => PrismaService))
    private readonly prismaService: PrismaService,
    @Inject(forwardRef(() => PaginationService))
    private readonly paginationService: PaginationService,
    @Inject(forwardRef(() => LocaleService))
    private readonly localeService: LocaleService,
  ) {}

  async list(
    locale: string,
    <%= fkNameCase.camel %>: number,
    paginationParams: PaginationDTO,
  ) {
    const where: any = {};
    if (<%= fkNameCase.camel %> !== undefined) where.<%= fkNameCase.snake %> = <%= fkNameCase.camel %>;

    return this.localeService.listModelWithLocale(
      locale,
      this.modelName,
      paginationParams,
      {
        <%= fkNameCase.snake %>: <%= fkNameCase.camel %>,
      },
    );
  }

  async get(<%= pkNameCase.camel %>: number) {
    return this.localeService.getModelWithLocale(
      this.modelName,
      <%= pkNameCase.camel %>,
    );
  }

  async create(<%= fkNameCase.camel %>: number, data: CreateDTO) {
    data.<%= fkNameCase.snake %> = <%= fkNameCase.camel %>;

    return this.localeService.createModelWithLocale(
      this.modelName,
      this.foreignKey,
      data,
    );
  }

  async update(<%= pkNameCase.camel %>: number, <%= fkNameCase.camel %>: number, data: UpdateDTO) {
    return this.localeService.updateModelWithLocale(
      this.modelName,
      this.foreignKey,
      <%= pkNameCase.camel %>,
      data,
      {
        <%= fkNameCase.snake %>: <%= fkNameCase.camel %>,
      },
    );
  }

  async delete(<%= fkNameCase.camel %>: number, { ids }: DeleteDTO) {
    if (ids == undefined || ids == null) {
      throw new BadRequestException(
        'You must select at least one item to delete.',
      );
    }

    return this.prismaService.<%= tableNameCase.snake %>.deleteMany({
      where: {
        <%= fkNameCase.snake %>: <%= fkNameCase.camel %>,
        <%= pkNameCase.snake %>: {
          in: ids,
        },
      },
    });
  }
}
