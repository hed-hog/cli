<% const toPascalCase = (str) => str.replace(/(^\w|[-_]\w)/g, (match) => match.replace(/[-_]/, '').toUpperCase()) %>;
<% const toCamelCase = (str) => str.replace(/_([a-z])/g, (_, char) => char.toUpperCase()); %>
<% const toKebabCase = (str) => str.replace(/_/g, '-'); %>

import { useApp } from '@/hooks/use-app'
import { HttpMethod } from '@/types/http-method'
import { Delete, PaginationParams, PaginationResult } from '@/types'
import { <%= toPascalCase(tableName) %> } from '@/types/models'

export function requests() {
  const { request } = useApp()

  const <%= toCamelCase(tableName) %>Create = async (data: <%= toPascalCase(tableName) %> ) => {
    return request<<%= toPascalCase(tableName) %>>(
     { 
        url: '/<%= toKebabCase(tableName) %>',
        method: HttpMethod.POST,
        data
      }
    )
  }

  const <%= toCamelCase(tableName) %>Update = async (id: number, data: PersonType) => {
    return request<<%= toPascalCase(tableName) %>>(
      {
        url: `/<%= toKebabCase(tableName) %>/${id}`,
        method: HttpMethod.PATCH,
        data
      }
    )
  }

  const <%= toCamelCase(tableName) %>Delete = async (ids: number[]) => {
    return request<Delete>(
      {
        url: '/<%= toKebabCase(tableName) %>',
        data: { ids },
        method: HttpMethod.DELETE,
        data: params}
    )
  }

  const <%= toCamelCase(tableName) %>List = async (params: PaginationParams) => {
    return request<PaginationResult<<%= toPascalCase(tableName) %>>>(
      {
        url: '/<%= toKebabCase(tableName) %>',
        params
      }
    )
  }

  const <%= toCamelCase(tableName) %>Get = async (id: number) => {
    return request<<%= toPascalCase(tableName) %>>(
      {
        url: `/<%= toKebabCase(tableName) %>/${id}`
      }
    )
  }

  return {
    <%= toCamelCase(tableName) %>Create,
    <%= toCamelCase(tableName) %>Update,
    <%= toCamelCase(tableName) %>Delete,
    <%= toCamelCase(tableName) %>List,
    <%= toCamelCase(tableName) %>Get,
  }
}
