import { PageTitle } from '@/components/custom/page-title'
import DataPanel from '@/components/panels/data-panel'
import { use<%= tableNameCase.pascal %>Delete } from '@/features/<%= libraryName %>/<%= tableNameCase.kebab %>'
import { useApp } from '@/hooks/use-app'
import { isPlural } from '@/lib/utils'
import { <%= tableNameCase.pascal %> } from '@/types/models'
import { IconEdit, IconPlus, IconTrash } from '@tabler/icons-react'
import { useState } from 'react'
import { useTranslation } from 'react-i18next'
import <%= tableNameCase.pascal %>CreatePanel from './components/<%= tableNameCase.kebab %>-create-panel'
import <%= tableNameCase.pascal %>UpdatePanel from './components/<%= tableNameCase.kebab %>-update-panel'

export default function Page() {
  const [selectedItems, setSelectedItems] = useState<<%= tableNameCase.pascal %>[]>([])
  const { mutate: delete<%= tableNameCase.pascal %> } = use<%= tableNameCase.pascal %>Delete()
  const { openSheet, confirm, closeSheet } = useApp()
  const { t } = useTranslation(['<%= libraryName %>.<%= tableNameCase.kebab %>', 'modules', 'actions'])

  const openCreate = () => {
    const id = openSheet({
      title: t('create', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
      description: t('createText', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
      children: () => (
        <<%= tableNameCase.pascal %>CreatePanel onCreated={() => closeSheet(id)} />
      ),
    })

    return id
  }

  const openDelete = (items: <%= tableNameCase.pascal %>[]) => {
    return confirm({
      title: `${t('delete', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' })} ${items.length} ${isPlural(items.length) ? t('items', { ns: 'actions' }) : t('item', { ns: 'actions' })}`,
      description: t('deleteText', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
    })
      .then(() =>
        delete<%= tableNameCase.pascal %>(
          items.map((item) => item.id).filter((id) => id !== undefined)
        )
      )
      .catch(() => setSelectedItems(items))
  }

  const openUpdate = (item: <%= tableNameCase.pascal %>) => {
    const id = openSheet({
      children: () => (
        <<%= tableNameCase.pascal %>UpdatePanel data={item} onUpdated={() => closeSheet(id)} />
      ),
      title: t('edit', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
      description: t('editText', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
    })

    return id
  }

  return (
    <>
      <PageTitle title={t('<%= tableNameCase.snake %>', { ns: 'modules' })} />
      <DataPanel
        url='/<%= tableNameCase.kebab %>'
        layout='table'
        id='<%= tableNameCase.kebab %>'
        selectable
        columns={[
          { key: 'id', header: 'ID', width: 64 },
          <% fieldsForSearch.forEach((field) => { %>
            { key: '<%= field %>', header: t('<%= field %>', { ns: '<%= tableNameCase.kebab %>' }) },
          <% }) %>
        ]}
        selected={selectedItems as <%= tableNameCase.pascal %>[]}
        multiple
        hasSearch
        sortable
        onItemDoubleClick={(item) => openUpdate(item)}
        menuActions={[
          {
            icon: <IconEdit className='mr-1 w-8 cursor-pointer' />,
            label: t('edit', { ns: 'actions' }),
            tooltip: t('editTooltip', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
            handler: (items: <%= tableNameCase.pascal %>[]) => {
              if (items.length === 1) openUpdate(items[0])
            },
            show: 'once',
          },
          {
            icon: <IconTrash className='mr-1 w-8 cursor-pointer' />,
            label: t('delete', { ns: 'actions' }),
            tooltip: t('deleteTooltip', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
            variant: 'destructive',
            handler: (items: <%= tableNameCase.pascal %>[]) => {
              openDelete(items)
            },
            show: 'some',
          },
          {
            icon: <IconPlus className='mr-1 w-8 cursor-pointer' />,
            label: t('create', { ns: 'actions' }),
            tooltip: t('createTooltip', { ns: '<%= libraryName %>.<%= tableNameCase.kebab %>' }),
            variant: 'default',
            handler: () => {
              openCreate()
            },
            show: 'none',
          },
        ]}
      />
    </>
  )
}
