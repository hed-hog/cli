import { PaginationService } from '@hedhog/pagination';
import { PrismaService } from '@hedhog/prisma';
import { Injectable, NotFoundException, BadRequestException } from '@nestjs/common';
import { CreateDTO } from './dto/create.dto';
import { UpdateDTO } from './dto/update.dto';
import { DeleteDTO } from '@hedhog/core';

@Injectable()
export class <%= tableNameCase.pascal %>Service {
  constructor(
    private readonly prismaService: PrismaService,
    private readonly paginationService: PaginationService,
  ) {}

  async create(<%= fkNameCase.camel %>: number, data: CreateDTO) {
    return this.prismaService.<%= tableNameCase.camel %>.create({
      data: {
        <%= fkNameCase.snake %>: <%= fkNameCase.camel %>,
        ...data,
      },
    });
  }

  async list(<%= fkNameCase.camel %>?: number, <%= pkNameCase.camel %>?: number) {
    const where: any = {};
    if (<%= fkNameCase.camel %> !== undefined) where.<%= fkNameCase.snake %> = <%= fkNameCase.camel %>;
    if (<%= pkNameCase.camel %> !== undefined) where.<%= pkNameCase.snake %> = <%= pkNameCase.camel %>;

    return this.paginationService.paginate(
      this.prismaService.<%= tableNameCase.camel %>,
      {
        fields: '<%= fieldsForSearch.join(',') %>',
      },
      {
        where
      },
    );
  }

  async update(<%= fkNameCase.camel %>: number, <%= pkNameCase.camel %>: number, data: UpdateDTO) {
    return this.prismaService.<%= tableNameCase.camel %>.updateMany({
      where: { 
        <%= fkNameCase.snake %>: <%= fkNameCase.camel %>,
        <%= pkNameCase.snake %>: <%= pkNameCase.camel %>
      },
      data,
    });
  }

  async delete(<%= fkNameCase.camel %>: number, { ids }: DeleteDTO) {
    if (ids == undefined || ids == null) {
      throw new BadRequestException(
        'You must select at least one item to delete.',
      );
    }

    return this.prismaService.<%= tableNameCase.snake %>.deleteMany({
      where: {
        <%= fkNameCase.snake %>: <%= fkNameCase.camel %>,
        <%= pkNameCase.snake %>: {
          in: ids,
        },
      },
    });
  }
}
