<% const toPascalCase = (str) => str.replace(/(^\w|[-_]\w)/g, (match) => match.replace(/[-_]/, '').toUpperCase()) %>;
<% const toKebabCase = (str) => str.replace(/_/g, '-'); %>
<%
const moduleImports = `
import { AdminModule } from '@hedhog/admin';
import { PaginationModule } from '@hedhog/pagination';
import { PrismaModule } from '@hedhog/prisma';
import { forwardRef, Module } from '@nestjs/common';`;

let additionalImports = '';
let controllersList = '';
let providersList = '';

for (const relation of options.tablesWithRelations) {
    const pascalCaseRelation = toPascalCase(relation);
    const kebabCaseRelation = toKebabCase(relation);
    additionalImports += `
import { ${pascalCaseRelation}Controller } from './${kebabCaseRelation}/${kebabCaseRelation}.controller';
import { ${pascalCaseRelation}Service } from './${kebabCaseRelation}/${kebabCaseRelation}.service';`;
    controllersList += `${pascalCaseRelation}Controller, `;
    providersList += `${pascalCaseRelation}Service, `;
}

const ownProviderImport = `
import { ${tableNameCase.pascal}Controller } from './${tableNameCase.kebab}.controller';
import { ${tableNameCase.pascal}Service } from './${tableNameCase.kebab}.service';`;
additionalImports += ownProviderImport;

controllersList += `${tableNameCase.pascal}Controller`;
providersList += `${tableNameCase.pascal}Service`;
%>
<%- moduleImports %><%- additionalImports %>
@Module({
  imports: [
    forwardRef(() => AdminModule),
    forwardRef(() => PrismaModule),
    forwardRef(() => PaginationModule),
  ],
  controllers: [
    <%= controllersList %>
  ],
  providers: [
    <%= providersList %>
  ],
  exports: [forwardRef(() => <%= tableNameCase.pascal %>Service)],
})
export class <%= tableNameCase.pascal %>Module {}
