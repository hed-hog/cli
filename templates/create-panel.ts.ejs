<% const toPascalCase = (str) => str.replace(/(^\w|[-_]\w)/g, (match) => match.replace(/[-_]/, '').toUpperCase()) %>;
<% const toCamelCase = (str) => str.replace(/_([a-z])/g, (_, char) => char.toUpperCase()); %>
<% const toKebabCase = (str) => str.replace(/_/g, '-'); %>

import FormPanel, {
    FormPanelRef,
    getFieldsLocale,
} from '@/components/custom/form-panel'
import { EnumFieldType } from '@/enums/EnumFieldType'
import { use<%= toPascalCase(tableName) %>Create } from '@/features/person-type'
import { <%= toPascalCase(tableName) %> } from '@/types/models'
import { forwardRef, useImperativeHandle, useRef } from 'react'
import { useTranslation } from 'react-i18next'

export type <%= toPascalCase(tableName) %>CreatePanelRef = {
    submit: () => void
}

export type <%= toPascalCase(tableName) %>CreatePanelProps = {
    onCreated?: (data: <%= toPascalCase(tableName) %>) => void
}

export const <%= toPascalCase(tableName) %>CreatePanel = forwardRef(
    ({ onCreated }: <%= toPascalCase(tableName) %>CreatePanelProps, ref) => {
        const formRef = useRef<FormPanelRef>(null)
        const { t } = useTranslation(['<%= toKebabCase(tableName) %>', 'actions'])
        const { mutateAsync: create<%= toPascalCase(tableName) %> } = use<%= toPascalCase(tableName) %>Create()

        useImperativeHandle(
            ref,
            () => ({
                submit: () => {
                formRef.current?.submit()
            },
        }),
        [formRef])

        return (
            <FormPanel
                ref={formRef}
                fields={[
                    {
                        name: 'slug',
                        label: { text: t('slug', { ns: 'translation' }) },
                        type: EnumFieldType.TEXT,
                        required: true,
                    },
                    ...getFieldsLocale([{ name: 'name' }]),
                ]}
                button={{ text: t('create', { ns: 'actions' }) }}
                onSubmit={async (data) => {
                    const createdData = await create<%= toPascalCase(tableName) %>(data)
                    if (typeof onCreated === 'function') {
                        onCreated(createdData)
                    }
                }}
            />
        )
    }
)
