<% const toPascalCase = (str) => str.replace(/(^\w|[-_]\w)/g, (match) => match.replace(/[-_]/, '').toUpperCase()) %>
<% const toCamelCase = (str) => str.replace(/_([a-z])/g, (_, char) => char.toUpperCase()); %>
<% const toKebabCase = (str) => str.replace(/_/g, '-'); %>

import { Role, OptionalParseIntPipe } from '@hedhog/core';
import {
  Body,
  Controller,
  Delete,
  Get,
  Param,
  ParseIntPipe,
  Patch,
  Post,
  Query,
  Inject,
  forwardRef
} from '@nestjs/common';
import { <%= toPascalCase(tableName) %>Service } from './<%= toKebabCase(tableName) %>.service';
import { CreateDTO } from './dto/create.dto';
import { UpdateDTO } from './dto/update.dto';
import { DeleteDTO } from '@hedhog/core';

@Role()
@Controller('<%= toCamelCase(tableName) %>/:<%= toCamelCase(fkName) %>/<%= toCamelCase(tableName) %>')
export class <%= toPascalCase(tableName) %>Controller {

  constructor(
    @Inject(forwardRef(() => <%= toCamelCase(tableName) %>Service))
    private readonly <%= toCamelCase(tableName) %>Service: <%= toPascalCase(tableName) %>Service
  ) {}

  @Post()
  create(
    @Param('<%= toCamelCase(fkName) %>', ParseIntPipe) <%= toCamelCase(fkName) %>: number,
    @Body() data: CreateDTO,
  ) {
    return this.<%= toCamelCase(tableName) %>Service.create(<%= toCamelCase(fkName) %>, data);
  }

  @Get()
  list(
    @Param('<%= toCamelCase(fkName) %>', ParseIntPipe) <%= toCamelCase(fkName) %>: number,
    @Pagination() paginationParams,
    @Locale() locale,
  ) {
    return this.<%= toCamelCase(tableName) %>Service.list(locale, <%= toCamelCase(fkName) %>, paginationParams);
  }

  @Patch(':<%= toCamelCase(tableName) %>Id')
  update(
    @Param('<%= toCamelCase(fkName) %>', ParseIntPipe) <%= toCamelCase(fkName) %>: number,
    @Param('<%= toCamelCase(pkName) %>', ParseIntPipe) <%= toCamelCase(pkName) %>: number,
    @Body() data: UpdateDTO,
  ) {
    return this.<%= toCamelCase(tableName) %>Service.update({
      <%= pkName %>: <%= toCamelCase(pkName) %>,
      data,
      personId,
    });
  }

  @Delete()
  delete(
    @Param('<%= toCamelCase(fkName) %>', ParseIntPipe) <%= toCamelCase(fkName) %>: number,
    @Body() { ids }: DeleteDTO,
  ) {
    return this.<%= toCamelCase(tableName) %>Service.delete(<%= toCamelCase(fkName) %>, { ids });
  }
}
