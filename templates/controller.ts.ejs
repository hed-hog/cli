<% const toPascalCase = (str) => str.replace(/(^\w|[-_]\w)/g, (match) => match.replace(/[-_]/, '').toUpperCase()) %>;
<% const toCamelCase = (str) => str.replace(/_([a-z])/g, (_, char) => char.toUpperCase()); %>
<% const toKebabCase = (str) => str.replace(/_/g, '-'); %>

import { Pagination } from '@hedhog/pagination';
import { Locale } from '@hedhog/locale';
import {
  Body,
  Controller,
  Delete,
  Get,
  Inject,
  Param,
  ParseIntPipe,
  Patch,
  Post,
  forwardRef,
} from '@nestjs/common';
import { CreateDTO } from './dto/create.dto';
import { UpdateDTO } from './dto/update.dto';
import { <%= toPascalCase(tableName) %>Service } from './<%= toKebabCase(tableName) %>.service';
import { Role, DeleteDTO } from '@hedhog/core';

@Role()
@Controller('<%= toKebabCase(tableName) %>')
export class <%= toPascalCase(tableName) %>Controller {
  constructor(
    @Inject(forwardRef(() => <%= toPascalCase(tableName) %>Service))
    private readonly <%= toCamelCase(tableName) %>Service: <%= toPascalCase(tableName) %>Service,
  ) {}

  @Get()
  async list(@Pagination() paginationParams) {
    return this.<%= toCamelCase(tableName) %>Service.list(paginationParams);
  }

  @Get(':id')
  async get(@Param('id', ParseIntPipe) id: number) {
    return this.<%= toCamelCase(tableName) %>Service.get(id);
  }

  @Post()
  async create(@Body() data: CreateDTO) {
    return this.<%= toCamelCase(tableName) %>Service.create(data);
  }

  @Patch(':id')
  async update(
    @Param('id', ParseIntPipe) id: number,
    @Body() data: UpdateDTO,
  ) {
    return this.<%= toCamelCase(tableName) %>Service.update({
      id,
      data,
    });
  }

  @Delete()
  async delete(@Body() data: DeleteDTO) {
    return this.<%= toCamelCase(tableName) %>Service.delete(data);
  }
}